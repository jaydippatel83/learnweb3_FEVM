{
  "address": "0xeed9912F049EB86B472Cf03850E0D3f915cd352A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftMarketplaceContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cryptoDevsNftContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftTokenId",
          "type": "uint256"
        }
      ],
      "name": "createProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "executeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yayVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nayVotes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "enum CryptoDevsDAO.Vote",
          "name": "vote",
          "type": "uint8"
        }
      ],
      "name": "voteOnProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x363009ce0c066ddca53cc378861b671e0b2fbb7e9be6a5b54fca6c5e0a32948a",
  "receipt": {
    "to": null,
    "from": "0x73426923AF5FdaDa87c6a3662E3d9253b87AC084",
    "contractAddress": "0xeed9912F049EB86B472Cf03850E0D3f915cd352A",
    "transactionIndex": 0,
    "gasUsed": "31106831",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
    "blockHash": "0xc0248d91fcf1244c46f73725c5bf292f64c9c794a413e9d3019d7904f4c5503d",
    "transactionHash": "0x363009ce0c066ddca53cc378861b671e0b2fbb7e9be6a5b54fca6c5e0a32948a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21314,
        "transactionHash": "0x363009ce0c066ddca53cc378861b671e0b2fbb7e9be6a5b54fca6c5e0a32948a",
        "address": "0xeed9912F049EB86B472Cf03850E0D3f915cd352A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000073426923af5fdada87c6a3662e3d9253b87ac084"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc0248d91fcf1244c46f73725c5bf292f64c9c794a413e9d3019d7904f4c5503d"
      }
    ],
    "blockNumber": 21314,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x31430f91dE6d701ac3d975FF75C966Fa9EdEd21a",
    "0x4AAFc3545FF5ea4E841aCbac6Ca74c85f0c5613B"
  ],
  "numDeployments": 1,
  "solcInputHash": "02cbeb0d819d24bf858c1e6bf0a4fc38",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftMarketplaceContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cryptoDevsNftContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftTokenId\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yayVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nayVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"enum CryptoDevsDAO.Vote\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"voteOnProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CryptoDevsDAO.sol\":\"CryptoDevsDAO\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/CryptoDevsDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// We will add the Interfaces here\\n\\ninterface IFakeNFTMarketplace {\\n    // returns the price of an NFT from the FakeNFTMarketplace\\n    function purchase(uint256 _tokenId) external payable;\\n\\n    //Returns the price in Wei for an NFT\\n    function getPrice() external view returns (uint256);\\n\\n    //Returns a boolean value - true if available, false if not\\n    function available(uint256 _tokenId) external view returns (bool);\\n}\\n\\ninterface ICryptoDevsNFT {\\n    // returns the number of NFTs owned by the given address\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    // tokenOfOwnerByIndex returns a tokenID at given index for owner\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\ncontract CryptoDevsDAO is Ownable {\\n    // Create an enum named Vote containing possible options for a vote\\n    //YAY = 0, NAY = 1\\n    enum Vote {\\n        YAY,\\n        NAY\\n    }\\n\\n    // Create a struct named Proposal containing all relevant information\\n    struct Proposal {\\n        // nftTokenId - the tokenID of the NFT to purchase from FakeNFTMarketplace if the proposal passes\\n        uint256 nftTokenId;\\n        // deadline - the UNIX timestamp until which this proposal is active. Proposal can be executed after the deadline has been exceeded.\\n        uint256 deadline;\\n        // yayVotes - number of yay votes for this proposal\\n        uint256 yayVotes;\\n        // nayVotes - number of nay votes for this proposal\\n        uint256 nayVotes;\\n        // executed - whether or not this proposal has been executed yet. Cannot be executed before the deadline has been exceeded.\\n        bool executed;\\n        // voters - a mapping of CryptoDevsNFT tokenIDs to booleans indicating whether that NFT has already been used to cast a vote or not\\n        mapping(uint256 => bool) voters;\\n    }\\n\\n    // Create a mapping of Proposal ID to Proposal\\n    mapping(uint256 => Proposal) public proposals;\\n\\n    // Number of proposals that have been created\\n    // initial value of numPropsal is default '0'\\n    uint256 public numProposals;\\n\\n    //  since we will be calling functions of the contracts 1.FakeNFTMarketplace and 2.CryptoDevsNFT contract, let's initialize reference/variables for those contracts.\\n    IFakeNFTMarketplace nftMarketplace;\\n    ICryptoDevsNFT cryptoDevsNFT;\\n\\n    // The payable allows this constructor to accept an ETH deposit when it is being deployed by deployer to fill the DAO RTH treasury.\\n    constructor(\\n        address _nftMarketplaceContractAddress,\\n        address _cryptoDevsNftContractAddress\\n    ) payable {\\n        nftMarketplace = IFakeNFTMarketplace(_nftMarketplaceContractAddress);\\n        cryptoDevsNFT = ICryptoDevsNFT(_cryptoDevsNftContractAddress);\\n    }\\n\\n    // Create a modifier which only allows a function to be called by someone who owns at least 1 CryptoDevsNFT\\n    modifier nftHolderOnly() {\\n        require(\\n            cryptoDevsNFT.balanceOf(msg.sender) > 0,\\n            \\\"Tou are not a DAO member!\\\"\\n        );\\n        _;\\n    }\\n\\n    // create a proposal - nft members only\\n    // _nftTokenId refers to the NFT you want buy from the \\\"FakeNFTMarkerplace\\\"\\n    //returns ID of newly created proposal\\n    function createProposal(uint256 _nftTokenId)\\n        external\\n        nftHolderOnly\\n        returns (uint256)\\n    {\\n        require(\\n            nftMarketplace.available(_nftTokenId),\\n            \\\"Nft is not available for sale\\\"\\n        );\\n\\n        Proposal storage proposal = proposals[numProposals];\\n        proposal.nftTokenId = _nftTokenId;\\n        proposal.deadline = block.timestamp + 5 minutes;\\n\\n        numProposals++;\\n\\n        // returning ID of newly created proposal\\n        return numProposals - 1;\\n    }\\n\\n    //modifier that only allows a function to be called\\n    modifier activeProposalOnly(uint256 propsalId) {\\n        require(\\n            proposals[propsalId].deadline > block.timestamp,\\n            \\\"voting Dedline exceeded\\\"\\n        );\\n        _;\\n    }\\n    //modifier which only allows a function to be called if the given proposals' deadline HAS been exceeded and if the proposal has not yet been executed\\n    modifier inactiveProposalOnly(uint256 proposalId) {\\n        require(\\n            proposals[proposalId].deadline <= block.timestamp,\\n            \\\"prposal is still active!\\\"\\n        );\\n        require(\\n            proposals[proposalId].executed == false,\\n            \\\"proposal is already executed!!\\\"\\n        );\\n        _;\\n    }\\n\\n    // vote on proposal - nft members only on an active proposal only\\n    // proposalId - the index of the proposal to vote on in the proposals array\\n    // vote - the type of vote they want to cast (yay or nay)\\n    function voteOnProposal(uint256 proposalId, Vote vote)\\n        external\\n        nftHolderOnly\\n        activeProposalOnly(proposalId)\\n    {\\n        Proposal storage proposal = proposals[proposalId];\\n        uint256 voterNFTBalance = cryptoDevsNFT.balanceOf(msg.sender);\\n        uint256 numVotes = 0;\\n\\n        // calculating how many nft owned by the voter that haven't already been used for voting on this proposal\\n        for (uint256 i = 0; i < voterNFTBalance; i++) {\\n            uint256 tokenId = cryptoDevsNFT.tokenOfOwnerByIndex(msg.sender, i);\\n            if (proposal.voters[tokenId] == false) {\\n                numVotes++;\\n                proposal.voters[tokenId] == true;\\n            }\\n        }\\n        require(numVotes > 1, \\\"you have already voted\\\");\\n\\n        if (vote == Vote.YAY) {\\n            proposal.yayVotes += numVotes;\\n        } else {\\n            proposal.nayVotes += numVotes;\\n        }\\n    }\\n\\n    // execute a proposal (means here purching nft from market place)\\n    function executeProposal(uint256 proposalId)\\n        external\\n        nftHolderOnly\\n        inactiveProposalOnly(proposalId)\\n    {\\n        Proposal storage proposal = proposals[proposalId];\\n\\n        // Did proposal pass?\\n        if (proposal.yayVotes > proposal.nayVotes) {\\n            uint256 nftPrice = nftMarketplace.getPrice();\\n            require(\\n                address(this).balance >= nftPrice,\\n                \\\"contract has not enough funds\\\"\\n            );\\n            nftMarketplace.purchase{value: nftPrice}(proposal.nftTokenId);\\n        }\\n        proposal.executed == true;\\n    }\\n\\n    //withdrawEther allows the contract owner (deployer) to withdraw the ETH from the contract\\n    function withdrawEther() external onlyOwner {\\n        uint256 amount = address(this).balance;\\n        require(amount > 0, \\\"Nothing to withdraw; contract balance empty\\\");\\n        payable(owner()).transfer(amount);\\n    }\\n\\n    // The following two functions allow the contract to accept ETH deposits\\n    // directly from a wallet without calling a function\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\",\"keccak256\":\"0xb2fe2827b199431db48a6ac01db79d0f2ccc751745157b8f245854dd6b6a1a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040516200195238038062001952833981810160405281019062000029919062000209565b620000496200003d620000d360201b60201c565b620000db60201b60201c565b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000250565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001d182620001a4565b9050919050565b620001e381620001c4565b8114620001ef57600080fd5b50565b6000815190506200020381620001d8565b92915050565b600080604083850312156200022357620002226200019f565b5b60006200023385828601620001f2565b92505060206200024685828601620001f2565b9150509250929050565b6116f280620002606000396000f3fe60806040526004361061008a5760003560e01c8063715018a611610059578063715018a6146101655780637362377b1461017c5780638da5cb5b14610193578063efafb22e146101be578063f2fde38b146101e757610091565b8063013cf08b146100935780630d61b519146100d4578063400e3949146100fd5780635a43dc001461012857610091565b3661009157005b005b34801561009f57600080fd5b506100ba60048036038101906100b59190610e76565b610210565b6040516100cb959493929190610ecd565b60405180910390f35b3480156100e057600080fd5b506100fb60048036038101906100f69190610e76565b610253565b005b34801561010957600080fd5b506101126105a2565b60405161011f9190610f20565b60405180910390f35b34801561013457600080fd5b5061014f600480360381019061014a9190610e76565b6105a8565b60405161015c9190610f20565b60405180910390f35b34801561017157600080fd5b5061017a6107c9565b005b34801561018857600080fd5b506101916107dd565b005b34801561019f57600080fd5b506101a861087e565b6040516101b59190610f7c565b60405180910390f35b3480156101ca57600080fd5b506101e560048036038101906101e09190610fbc565b6108a7565b005b3480156101f357600080fd5b5061020e60048036038101906102099190611028565b610c6e565b005b60016020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040160009054906101000a900460ff16905085565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016102b09190610f7c565b602060405180830381865afa1580156102cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f1919061106a565b11610331576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610328906110f4565b60405180910390fd5b80426001600083815260200190815260200160002060010154111561038b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038290611160565b60405180910390fd5b600015156001600083815260200190815260200160002060040160009054906101000a900460ff161515146103f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ec906111cc565b60405180910390fd5b6000600160008481526020019081526020016000209050806003015481600201541115610588576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af919061106a565b9050804710156104f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104eb90611238565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663efef39a18284600001546040518363ffffffff1660e01b81526004016105549190610f20565b6000604051808303818588803b15801561056d57600080fd5b505af1158015610581573d6000803e3d6000fd5b5050505050505b600115158160040160009054906101000a90505050505050565b60025481565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016106069190610f7c565b602060405180830381865afa158015610623573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610647919061106a565b11610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e906110f4565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396e494e8836040518263ffffffff1660e01b81526004016106e29190610f20565b602060405180830381865afa1580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107239190611284565b610762576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610759906112fd565b60405180910390fd5b6000600160006002548152602001908152602001600020905082816000018190555061012c42610792919061134c565b8160010181905550600260008154809291906107ad90611380565b919050555060016002546107c191906113c8565b915050919050565b6107d1610cf1565b6107db6000610d6f565b565b6107e5610cf1565b60004790506000811161082d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108249061146e565b60405180910390fd5b61083561087e565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561087a573d6000803e3d6000fd5b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016109049190610f7c565b602060405180830381865afa158015610921573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610945919061106a565b11610985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097c906110f4565b60405180910390fd5b81426001600083815260200190815260200160002060010154116109de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d5906114da565b60405180910390fd5b60006001600085815260200190815260200160002090506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610a529190610f7c565b602060405180830381865afa158015610a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a93919061106a565b90506000805b82811015610bba576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f745c5933846040518363ffffffff1660e01b8152600401610b009291906114fa565b602060405180830381865afa158015610b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b41919061106a565b90506000151585600501600083815260200190815260200160002060009054906101000a900460ff16151503610ba6578280610b7c90611380565b9350506001151585600501600083815260200190815260200160002060009054906101000a905050505b508080610bb290611380565b915050610a99565b5060018111610bfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf59061156f565b60405180910390fd5b60006001811115610c1257610c1161158f565b5b856001811115610c2557610c2461158f565b5b03610c4a5780836002016000828254610c3e919061134c565b92505081905550610c66565b80836003016000828254610c5e919061134c565b925050819055505b505050505050565b610c76610cf1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ce5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdc90611630565b60405180910390fd5b610cee81610d6f565b50565b610cf9610e33565b73ffffffffffffffffffffffffffffffffffffffff16610d1761087e565b73ffffffffffffffffffffffffffffffffffffffff1614610d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d649061169c565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b610e5381610e40565b8114610e5e57600080fd5b50565b600081359050610e7081610e4a565b92915050565b600060208284031215610e8c57610e8b610e3b565b5b6000610e9a84828501610e61565b91505092915050565b610eac81610e40565b82525050565b60008115159050919050565b610ec781610eb2565b82525050565b600060a082019050610ee26000830188610ea3565b610eef6020830187610ea3565b610efc6040830186610ea3565b610f096060830185610ea3565b610f166080830184610ebe565b9695505050505050565b6000602082019050610f356000830184610ea3565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f6682610f3b565b9050919050565b610f7681610f5b565b82525050565b6000602082019050610f916000830184610f6d565b92915050565b60028110610fa457600080fd5b50565b600081359050610fb681610f97565b92915050565b60008060408385031215610fd357610fd2610e3b565b5b6000610fe185828601610e61565b9250506020610ff285828601610fa7565b9150509250929050565b61100581610f5b565b811461101057600080fd5b50565b60008135905061102281610ffc565b92915050565b60006020828403121561103e5761103d610e3b565b5b600061104c84828501611013565b91505092915050565b60008151905061106481610e4a565b92915050565b6000602082840312156110805761107f610e3b565b5b600061108e84828501611055565b91505092915050565b600082825260208201905092915050565b7f546f7520617265206e6f7420612044414f206d656d6265722100000000000000600082015250565b60006110de601983611097565b91506110e9826110a8565b602082019050919050565b6000602082019050818103600083015261110d816110d1565b9050919050565b7f7072706f73616c206973207374696c6c20616374697665210000000000000000600082015250565b600061114a601883611097565b915061115582611114565b602082019050919050565b600060208201905081810360008301526111798161113d565b9050919050565b7f70726f706f73616c20697320616c726561647920657865637574656421210000600082015250565b60006111b6601e83611097565b91506111c182611180565b602082019050919050565b600060208201905081810360008301526111e5816111a9565b9050919050565b7f636f6e747261637420686173206e6f7420656e6f7567682066756e6473000000600082015250565b6000611222601d83611097565b915061122d826111ec565b602082019050919050565b6000602082019050818103600083015261125181611215565b9050919050565b61126181610eb2565b811461126c57600080fd5b50565b60008151905061127e81611258565b92915050565b60006020828403121561129a57611299610e3b565b5b60006112a88482850161126f565b91505092915050565b7f4e6674206973206e6f7420617661696c61626c6520666f722073616c65000000600082015250565b60006112e7601d83611097565b91506112f2826112b1565b602082019050919050565b60006020820190508181036000830152611316816112da565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061135782610e40565b915061136283610e40565b925082820190508082111561137a5761137961131d565b5b92915050565b600061138b82610e40565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036113bd576113bc61131d565b5b600182019050919050565b60006113d382610e40565b91506113de83610e40565b92508282039050818111156113f6576113f561131d565b5b92915050565b7f4e6f7468696e6720746f2077697468647261773b20636f6e747261637420626160008201527f6c616e636520656d707479000000000000000000000000000000000000000000602082015250565b6000611458602b83611097565b9150611463826113fc565b604082019050919050565b600060208201905081810360008301526114878161144b565b9050919050565b7f766f74696e67204465646c696e65206578636565646564000000000000000000600082015250565b60006114c4601783611097565b91506114cf8261148e565b602082019050919050565b600060208201905081810360008301526114f3816114b7565b9050919050565b600060408201905061150f6000830185610f6d565b61151c6020830184610ea3565b9392505050565b7f796f75206861766520616c726561647920766f74656400000000000000000000600082015250565b6000611559601683611097565b915061156482611523565b602082019050919050565b600060208201905081810360008301526115888161154c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061161a602683611097565b9150611625826115be565b604082019050919050565b600060208201905081810360008301526116498161160d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611686602083611097565b915061169182611650565b602082019050919050565b600060208201905081810360008301526116b581611679565b905091905056fea2646970667358221220332c65e14b4013cf53b1a692227974ce39d4747e890dd78e862375c72b9d500264736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063715018a611610059578063715018a6146101655780637362377b1461017c5780638da5cb5b14610193578063efafb22e146101be578063f2fde38b146101e757610091565b8063013cf08b146100935780630d61b519146100d4578063400e3949146100fd5780635a43dc001461012857610091565b3661009157005b005b34801561009f57600080fd5b506100ba60048036038101906100b59190610e76565b610210565b6040516100cb959493929190610ecd565b60405180910390f35b3480156100e057600080fd5b506100fb60048036038101906100f69190610e76565b610253565b005b34801561010957600080fd5b506101126105a2565b60405161011f9190610f20565b60405180910390f35b34801561013457600080fd5b5061014f600480360381019061014a9190610e76565b6105a8565b60405161015c9190610f20565b60405180910390f35b34801561017157600080fd5b5061017a6107c9565b005b34801561018857600080fd5b506101916107dd565b005b34801561019f57600080fd5b506101a861087e565b6040516101b59190610f7c565b60405180910390f35b3480156101ca57600080fd5b506101e560048036038101906101e09190610fbc565b6108a7565b005b3480156101f357600080fd5b5061020e60048036038101906102099190611028565b610c6e565b005b60016020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040160009054906101000a900460ff16905085565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016102b09190610f7c565b602060405180830381865afa1580156102cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f1919061106a565b11610331576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610328906110f4565b60405180910390fd5b80426001600083815260200190815260200160002060010154111561038b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038290611160565b60405180910390fd5b600015156001600083815260200190815260200160002060040160009054906101000a900460ff161515146103f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ec906111cc565b60405180910390fd5b6000600160008481526020019081526020016000209050806003015481600201541115610588576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af919061106a565b9050804710156104f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104eb90611238565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663efef39a18284600001546040518363ffffffff1660e01b81526004016105549190610f20565b6000604051808303818588803b15801561056d57600080fd5b505af1158015610581573d6000803e3d6000fd5b5050505050505b600115158160040160009054906101000a90505050505050565b60025481565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016106069190610f7c565b602060405180830381865afa158015610623573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610647919061106a565b11610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e906110f4565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396e494e8836040518263ffffffff1660e01b81526004016106e29190610f20565b602060405180830381865afa1580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107239190611284565b610762576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610759906112fd565b60405180910390fd5b6000600160006002548152602001908152602001600020905082816000018190555061012c42610792919061134c565b8160010181905550600260008154809291906107ad90611380565b919050555060016002546107c191906113c8565b915050919050565b6107d1610cf1565b6107db6000610d6f565b565b6107e5610cf1565b60004790506000811161082d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108249061146e565b60405180910390fd5b61083561087e565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561087a573d6000803e3d6000fd5b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016109049190610f7c565b602060405180830381865afa158015610921573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610945919061106a565b11610985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097c906110f4565b60405180910390fd5b81426001600083815260200190815260200160002060010154116109de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d5906114da565b60405180910390fd5b60006001600085815260200190815260200160002090506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610a529190610f7c565b602060405180830381865afa158015610a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a93919061106a565b90506000805b82811015610bba576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f745c5933846040518363ffffffff1660e01b8152600401610b009291906114fa565b602060405180830381865afa158015610b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b41919061106a565b90506000151585600501600083815260200190815260200160002060009054906101000a900460ff16151503610ba6578280610b7c90611380565b9350506001151585600501600083815260200190815260200160002060009054906101000a905050505b508080610bb290611380565b915050610a99565b5060018111610bfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf59061156f565b60405180910390fd5b60006001811115610c1257610c1161158f565b5b856001811115610c2557610c2461158f565b5b03610c4a5780836002016000828254610c3e919061134c565b92505081905550610c66565b80836003016000828254610c5e919061134c565b925050819055505b505050505050565b610c76610cf1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ce5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdc90611630565b60405180910390fd5b610cee81610d6f565b50565b610cf9610e33565b73ffffffffffffffffffffffffffffffffffffffff16610d1761087e565b73ffffffffffffffffffffffffffffffffffffffff1614610d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d649061169c565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b610e5381610e40565b8114610e5e57600080fd5b50565b600081359050610e7081610e4a565b92915050565b600060208284031215610e8c57610e8b610e3b565b5b6000610e9a84828501610e61565b91505092915050565b610eac81610e40565b82525050565b60008115159050919050565b610ec781610eb2565b82525050565b600060a082019050610ee26000830188610ea3565b610eef6020830187610ea3565b610efc6040830186610ea3565b610f096060830185610ea3565b610f166080830184610ebe565b9695505050505050565b6000602082019050610f356000830184610ea3565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f6682610f3b565b9050919050565b610f7681610f5b565b82525050565b6000602082019050610f916000830184610f6d565b92915050565b60028110610fa457600080fd5b50565b600081359050610fb681610f97565b92915050565b60008060408385031215610fd357610fd2610e3b565b5b6000610fe185828601610e61565b9250506020610ff285828601610fa7565b9150509250929050565b61100581610f5b565b811461101057600080fd5b50565b60008135905061102281610ffc565b92915050565b60006020828403121561103e5761103d610e3b565b5b600061104c84828501611013565b91505092915050565b60008151905061106481610e4a565b92915050565b6000602082840312156110805761107f610e3b565b5b600061108e84828501611055565b91505092915050565b600082825260208201905092915050565b7f546f7520617265206e6f7420612044414f206d656d6265722100000000000000600082015250565b60006110de601983611097565b91506110e9826110a8565b602082019050919050565b6000602082019050818103600083015261110d816110d1565b9050919050565b7f7072706f73616c206973207374696c6c20616374697665210000000000000000600082015250565b600061114a601883611097565b915061115582611114565b602082019050919050565b600060208201905081810360008301526111798161113d565b9050919050565b7f70726f706f73616c20697320616c726561647920657865637574656421210000600082015250565b60006111b6601e83611097565b91506111c182611180565b602082019050919050565b600060208201905081810360008301526111e5816111a9565b9050919050565b7f636f6e747261637420686173206e6f7420656e6f7567682066756e6473000000600082015250565b6000611222601d83611097565b915061122d826111ec565b602082019050919050565b6000602082019050818103600083015261125181611215565b9050919050565b61126181610eb2565b811461126c57600080fd5b50565b60008151905061127e81611258565b92915050565b60006020828403121561129a57611299610e3b565b5b60006112a88482850161126f565b91505092915050565b7f4e6674206973206e6f7420617661696c61626c6520666f722073616c65000000600082015250565b60006112e7601d83611097565b91506112f2826112b1565b602082019050919050565b60006020820190508181036000830152611316816112da565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061135782610e40565b915061136283610e40565b925082820190508082111561137a5761137961131d565b5b92915050565b600061138b82610e40565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036113bd576113bc61131d565b5b600182019050919050565b60006113d382610e40565b91506113de83610e40565b92508282039050818111156113f6576113f561131d565b5b92915050565b7f4e6f7468696e6720746f2077697468647261773b20636f6e747261637420626160008201527f6c616e636520656d707479000000000000000000000000000000000000000000602082015250565b6000611458602b83611097565b9150611463826113fc565b604082019050919050565b600060208201905081810360008301526114878161144b565b9050919050565b7f766f74696e67204465646c696e65206578636565646564000000000000000000600082015250565b60006114c4601783611097565b91506114cf8261148e565b602082019050919050565b600060208201905081810360008301526114f3816114b7565b9050919050565b600060408201905061150f6000830185610f6d565b61151c6020830184610ea3565b9392505050565b7f796f75206861766520616c726561647920766f74656400000000000000000000600082015250565b6000611559601683611097565b915061156482611523565b602082019050919050565b600060208201905081810360008301526115888161154c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061161a602683611097565b9150611625826115be565b604082019050919050565b600060208201905081810360008301526116498161160d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611686602083611097565b915061169182611650565b602082019050919050565b600060208201905081810360008301526116b581611679565b905091905056fea2646970667358221220332c65e14b4013cf53b1a692227974ce39d4747e890dd78e862375c72b9d500264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/CryptoDevsDAO.sol:CryptoDevsDAO",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 197,
        "contract": "contracts/CryptoDevsDAO.sol:CryptoDevsDAO",
        "label": "proposals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Proposal)192_storage)"
      },
      {
        "astId": 199,
        "contract": "contracts/CryptoDevsDAO.sol:CryptoDevsDAO",
        "label": "numProposals",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 202,
        "contract": "contracts/CryptoDevsDAO.sol:CryptoDevsDAO",
        "label": "nftMarketplace",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IFakeNFTMarketplace)155"
      },
      {
        "astId": 205,
        "contract": "contracts/CryptoDevsDAO.sol:CryptoDevsDAO",
        "label": "cryptoDevsNFT",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ICryptoDevsNFT)172"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICryptoDevsNFT)172": {
        "encoding": "inplace",
        "label": "contract ICryptoDevsNFT",
        "numberOfBytes": "20"
      },
      "t_contract(IFakeNFTMarketplace)155": {
        "encoding": "inplace",
        "label": "contract IFakeNFTMarketplace",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Proposal)192_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CryptoDevsDAO.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)192_storage"
      },
      "t_struct(Proposal)192_storage": {
        "encoding": "inplace",
        "label": "struct CryptoDevsDAO.Proposal",
        "members": [
          {
            "astId": 179,
            "contract": "contracts/CryptoDevsDAO.sol:CryptoDevsDAO",
            "label": "nftTokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 181,
            "contract": "contracts/CryptoDevsDAO.sol:CryptoDevsDAO",
            "label": "deadline",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 183,
            "contract": "contracts/CryptoDevsDAO.sol:CryptoDevsDAO",
            "label": "yayVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 185,
            "contract": "contracts/CryptoDevsDAO.sol:CryptoDevsDAO",
            "label": "nayVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 187,
            "contract": "contracts/CryptoDevsDAO.sol:CryptoDevsDAO",
            "label": "executed",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 191,
            "contract": "contracts/CryptoDevsDAO.sol:CryptoDevsDAO",
            "label": "voters",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_bool)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}