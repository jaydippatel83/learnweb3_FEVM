{
  "language": "Solidity",
  "sources": {
    "contracts/Whitelist.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\n\ncontract Whitelist {\n\n    // Max number of whitelisted addresses allowed\n    uint8 public maxWhitelistedAddresses;\n\n    // Create a mapping of whitelistedAddresses\n    // if an address is whitelisted, we would set it to true, it is false by default for all other addresses.\n    mapping(address => bool) public whitelistedAddresses;\n\n    // numAddressesWhitelisted would be used to keep track of how many addresses have been whitelisted\n    // NOTE: Don't change this variable name, as it will be part of verification\n    uint8 public numAddressesWhitelisted;\n\n    // Setting the Max number of whitelisted addresses\n    // User will put the value at the time of deployment\n    constructor(uint8 _maxWhitelistedAddresses) {\n        maxWhitelistedAddresses =  _maxWhitelistedAddresses;\n    }\n\n    /**\n        addAddressToWhitelist - This function adds the address of the sender to the\n        whitelist\n     */\n    function addAddressToWhitelist() public {\n        // check if the user has already been whitelisted\n        require(!whitelistedAddresses[msg.sender], \"Sender has already been whitelisted\");\n        // check if the numAddressesWhitelisted < maxWhitelistedAddresses, if not then throw an error.\n        require(numAddressesWhitelisted < maxWhitelistedAddresses, \"More addresses cant be added, limit reached\");\n        // Add the address which called the function to the whitelistedAddress array\n        whitelistedAddresses[msg.sender] = true;\n        // Increase the number of whitelisted addresses\n        numAddressesWhitelisted += 1;\n    }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}